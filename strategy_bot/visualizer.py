import matplotlib.pyplot as plt
from matplotlib.patches import Polygon
import numpy as np

# --- –ù–ê–°–¢–†–û–ô–ö–ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò ---

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≥–µ–∫—Å–æ–≤ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ API)
HEX_TYPE_COLORS = {
    1: '#FFD700',  # 1: –ú—É—Ä–∞–≤–µ–π–Ω–∏–∫ (–∑–æ–ª–æ—Ç–æ–π)
    2: '#FFFFFF',  # 2: –ü—É—Å—Ç–æ–π (–±–µ–ª—ã–π)
    3: '#A0522D',  # 3: –ì—Ä—è–∑—å (–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π)
    4: '#90EE90',  # 4: –ö–∏—Å–ª–æ—Ç–∞ (—Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π)
    5: '#808080',  # 5: –ö–∞–º–Ω–∏ (—Å–µ—Ä—ã–π)
}

# –û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ —é–Ω–∏—Ç–æ–≤ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ API)
ANT_TYPE_SYMBOLS = {
    0: 'W',  # 0: –†–∞–±–æ—á–∏–π
    1: 'F',  # 1: –ë–æ–µ—Ü
    2: 'S',  # 2: –†–∞–∑–≤–µ–¥—á–∏–∫
}
ANT_TYPE_NAMES = {
    0: '–†–∞–±–æ—á–∏–π',
    1: '–ë–æ–µ—Ü',
    2: '–†–∞–∑–≤–µ–¥—á–∏–∫',
}

# –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤ (–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ API)
FOOD_TYPE_COLORS = {
    1: 'red',      # 1: –Ø–±–ª–æ–∫–æ
    2: 'orange',   # 2: –•–ª–µ–±
    3: '#FFC0CB'   # 3: –ù–µ–∫—Ç–∞—Ä (—Ö–æ—Ç—è –Ω–∞ –∫–∞—Ä—Ç–µ –æ–Ω –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è)
}
FOOD_TYPE_SYMBOLS = {
    1: 'üçé',
    2: 'üçû',
}


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def axial_to_pixel(q, r, size):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞–∫—Å–∏–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–µ–∫—Å–∞ –≤ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ (x, y) –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏."""
    x = size * (3. / 2. * q)
    y = size * (np.sqrt(3) / 2. * q + np.sqrt(3) * r)
    return x, y

def draw_hexagon(ax, q, r, size, color, edgecolor='black', linewidth=1):
    """–†–∏—Å—É–µ—Ç –æ–¥–∏–Ω –≥–µ–∫—Å –Ω–∞ —Ö–æ–ª—Å—Ç–µ."""
    x, y = axial_to_pixel(q, r, size)
    corners = []
    for i in range(6):
        angle_deg = 60 * i - 30
        angle_rad = np.pi / 180 * angle_deg
        corners.append((x + size * np.cos(angle_rad), y + size * np.sin(angle_rad)))
    
    poly = Polygon(corners, facecolor=color, edgecolor=edgecolor, linewidth=linewidth)
    ax.add_patch(poly)


# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò ---

def visualize_map(api_data, save_to_file=None):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ /api/arena –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—É.
    
    :param api_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API /api/arena.
    :param save_to_file: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä. 'map.png'), –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –∞ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞.
    """
    fig, ax = plt.subplots(figsize=(16, 12))
    ax.set_aspect('equal')
    hex_size = 1.0  # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –≥–µ–∫—Å–∞

    # 1. –†–∏—Å—É–µ–º –≤–∏–¥–∏–º—ã–µ –≥–µ–∫—Å—ã –∫–∞—Ä—Ç—ã
    if 'map' in api_data and api_data['map']:
        for hex_data in api_data['map']:
            q, r = hex_data['q'], hex_data['r']
            hex_type = hex_data['type']
            color = HEX_TYPE_COLORS.get(hex_type, '#E0E0E0') # –°–µ—Ä—ã–π –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
            draw_hexagon(ax, q, r, hex_size, color)
    
    # 2. –í—ã–¥–µ–ª—è–µ–º –≥–µ–∫—Å—ã —Å–≤–æ–µ–≥–æ –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞
    if 'home' in api_data and api_data['home']:
        home_coords = {(h['q'], h['r']) for h in api_data['home']}
        spot_coord = (api_data['spot']['q'], api_data['spot']['r']) if 'spot' in api_data else None

        for q, r in home_coords:
            # –î–µ–ª–∞–µ–º —Ä–∞–º–∫—É –º—É—Ä–∞–≤–µ–π–Ω–∏–∫–∞ —Ç–æ–ª—â–µ –∏ –¥—Ä—É–≥–æ–≥–æ —Ü–≤–µ—Ç–∞
            draw_hexagon(ax, q, r, hex_size, HEX_TYPE_COLORS[1], edgecolor='blue', linewidth=3)
            if (q, r) == spot_coord:
                # –û—Å–æ–±–æ –≤—ã–¥–µ–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π –≥–µ–∫—Å (—Ç–æ—á–∫—É —Å–ø–∞–≤–Ω–∞)
                x, y = axial_to_pixel(q, r, hex_size)
                ax.text(x, y, '‚òÖ', ha='center', va='center', fontsize=20, color='blue', zorder=10)

    # 3. –†–∏—Å—É–µ–º —Ä–µ—Å—É—Ä—Å—ã (–µ–¥—É)
    if 'food' in api_data and api_data['food']:
        for food_data in api_data['food']:
            q, r = food_data['q'], food_data['r']
            food_type = food_data['type']
            x, y = axial_to_pixel(q, r, hex_size)
            symbol = FOOD_TYPE_SYMBOLS.get(food_type, '?')
            ax.text(x, y, symbol, ha='center', va='center', fontsize=15, zorder=5)

    # 4. –†–∏—Å—É–µ–º –≤—Ä–∞–≥–æ–≤
    if 'enemies' in api_data and api_data['enemies']:
        for enemy in api_data['enemies']:
            q, r = enemy['q'], enemy['r']
            x, y = axial_to_pixel(q, r, hex_size)
            symbol = ANT_TYPE_SYMBOLS.get(enemy['type'], '?')
            ax.text(x, y + 0.3, f'E-{symbol}', ha='center', va='center', color='red', fontsize=10, weight='bold', zorder=8)
            ax.text(x, y - 0.3, f"{enemy['health']}", ha='center', va='center', color='red', fontsize=8, zorder=8)


    # 5. –†–∏—Å—É–µ–º —Å–≤–æ–∏—Ö —é–Ω–∏—Ç–æ–≤ –∏ –∏—Ö –º–∞—Ä—à—Ä—É—Ç—ã
    if 'ants' in api_data and api_data['ants']:
        for ant in api_data['ants']:
            q, r = ant['q'], ant['r']
            symbol = ANT_TYPE_SYMBOLS.get(ant['type'], '?')
            health = ant['health']
            
            # –†–∏—Å—É–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
            if ant.get('move'):
                path_coords = [(p['q'], p['r']) for p in ant['move']]
                path_pixels = [axial_to_pixel(pq, pr, hex_size) for pq, pr in path_coords]
                if path_pixels:
                    path_x, path_y = zip(*path_pixels)
                    ax.plot(path_x, path_y, 'b-', linewidth=2, alpha=0.7, zorder=7) # –°–∏–Ω—è—è –ª–∏–Ω–∏—è
            
            # –†–∏—Å—É–µ–º —Å–∞–º–æ–≥–æ —é–Ω–∏—Ç–∞
            x, y = axial_to_pixel(q, r, hex_size)
            ax.text(x, y + 0.3, symbol, ha='center', va='center', color='blue', fontsize=12, weight='bold', zorder=9)
            ax.text(x, y - 0.3, f"{health}", ha='center', va='center', color='blue', fontsize=8, zorder=9)
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º, –µ—Å–ª–∏ —é–Ω–∏—Ç –Ω–µ—Å–µ—Ç –µ–¥—É
            if ant.get('food') and ant['food']['amount'] > 0:
                food_symbol = FOOD_TYPE_SYMBOLS.get(ant['food']['type'], '?')
                ax.text(x, y, food_symbol, ha='center', va='center', fontsize=10, zorder=10, alpha=0.8)


    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    ax.autoscale_view()
    ax.set_title(f"–ö–∞—Ä—Ç–∞ –Ω–∞ —Ö–æ–¥: {api_data.get('turnNo', 'N/A')}. –í–∞—à —Å—á–µ—Ç: {api_data.get('score', 0)}", fontsize=16)
    ax.set_xlabel("q-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)")
    ax.set_ylabel("r-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ)")
    plt.grid(False)
    ax.invert_yaxis() # –ß–∞—Å—Ç–æ —É–¥–æ–±–Ω–µ–µ, —á—Ç–æ–±—ã (0,0) –±—ã–ª –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É

    if save_to_file:
        plt.savefig(save_to_file, bbox_inches='tight', dpi=150)
        print(f"–ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {save_to_file}")
        plt.close(fig) # –ó–∞–∫—Ä—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –≤ –ø–∞–º—è—Ç–∏
    else:
        plt.show()

# --- –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ---

if __name__ == '__main__':
    # –≠–¢–û –ú–û–ö-–î–ê–ù–ù–´–ï. –ó–ê–ú–ï–ù–ò–¢–ï –ò–• –†–ï–ê–õ–¨–ù–´–ú –û–¢–í–ï–¢–û–ú –û–¢ /api/arena
    mock_api_data = {
      "ants": [
        {"id": "uuid-worker-1", "type": 0, "q": 1, "r": 0, "health": 130, "food": {"amount": 5, "type": 1}, "move": [{"q": 1, "r":-1}, {"q": 0, "r": 0}]},
        {"id": "uuid-fighter-1", "type": 1, "q": 2, "r": -1, "health": 180, "food": None, "move": []},
        {"id": "uuid-scout-1", "type": 2, "q": 3, "r": 0, "health": 80, "food": None, "move": []}
      ],
      "enemies": [
        {"type": 1, "q": 4, "r": 0, "health": 150, "food": None}
      ],
      "food": [
        {"q": 5, "r": 0, "type": 1, "amount": 10},
        {"q": 2, "r": 2, "type": 2, "amount": 20}
      ],
      "home": [
        {"q": 0, "r": 0},
        {"q": 0, "r": -1},
        {"q": 1, "r": -1}
      ],
      "map": [
        {"q": 0, "r": 0, "type": 1, "cost": 1}, {"q": 0, "r": -1, "type": 1, "cost": 1}, {"q": 1, "r": -1, "type": 1, "cost": 1},
        {"q": 1, "r": 0, "type": 2, "cost": 1}, {"q": 2, "r": -1, "type": 2, "cost": 1}, {"q": 2, "r": 0, "type": 3, "cost": 2},
        {"q": 3, "r": 0, "type": 2, "cost": 1}, {"q": 4, "r": 0, "type": 4, "cost": 1}, {"q": 5, "r": 0, "type": 2, "cost": 1},
        {"q": 3, "r": 1, "type": 5, "cost": 999}, {"q": 2, "r": 2, "type": 2, "cost": 1}
      ],
      "nextTurnIn": 1.5,
      "score": 60,
      "spot": {"q": 0, "r": 0},
      "turnNo": 77
    }

    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    # –ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –≤ –æ–∫–Ω–µ:
    visualize_map(mock_api_data)
    
    # –ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –≤ —Ñ–∞–π–ª (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –±–æ—Ç–∞, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏—Å—Ç–æ—Ä–∏–µ–π):
    # filename = f"turn_{mock_api_data['turnNo']}.png"
    # visualize_map(mock_api_data, save_to_file=filename)